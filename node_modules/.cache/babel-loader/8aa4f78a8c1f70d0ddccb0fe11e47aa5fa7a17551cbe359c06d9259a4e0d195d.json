{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adema\\\\OneDrive\\\\Bureau\\\\FAC\\\\MDW3\\\\PPP\\\\PROJECT\\\\another test\\\\project_ai\\\\src\\\\Components\\\\RevAIComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './RevUi.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RevAIComponent = () => {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [audioFile, setAudioFile] = useState(null);\n  const transcribeAudio = async () => {\n    try {\n      if (!audioFile) {\n        alert('Please select an audio file.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('audioFile', audioFile); // Change 'audioUrl' to 'audioFile'\n\n      const response = await axios.post('http://localhost:5000/api/transcribe', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data' // Change content type to 'multipart/form-data'\n        }\n      });\n\n      const jobId = response.data.jobId;\n      const checkStatus = async () => {\n        try {\n          const transcriptResponse = await axios.get(`http://localhost:5000/api/transcribe/${jobId}`, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if (transcriptResponse.data.status === 'transcribed') {\n            const text = transcriptResponse.data.transcript;\n            setTranscription(text);\n          } else {\n            setTimeout(checkStatus, 3000);\n          }\n        } catch (error) {\n          console.error('Error fetching transcript:', error);\n        }\n      };\n      checkStatus();\n    } catch (error) {\n      console.error('Error transcribing audio:', error);\n    }\n  };\n  const checkStatus = async () => {\n    try {\n      const transcriptResponse = await axios.get(`http://localhost:5000/api/transcribe/${jobId}`, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (transcriptResponse.data.status === 'transcribed') {\n        const text = transcriptResponse.data.transcript;\n        setTranscription(text);\n      } else {\n        setTimeout(checkStatus, 3000);\n      }\n    } catch (error) {\n      console.error('Error fetching transcript:', error);\n    }\n  };\n\n  //   const handleFileChange = (event) => {\n  //     setAudioFile(event.target.files[0]);\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: transcribeAudio,\n        children: \"Transcribe Audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Transcription Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(RevAIComponent, \"PXeG+zRkzyiQBycd7SXNjZEp/fQ=\");\n_c = RevAIComponent;\nexport default RevAIComponent;\nvar _c;\n$RefreshReg$(_c, \"RevAIComponent\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","RevAIComponent","_s","transcription","setTranscription","audioFile","setAudioFile","transcribeAudio","alert","formData","FormData","append","response","post","headers","jobId","data","checkStatus","transcriptResponse","get","status","text","transcript","setTimeout","error","console","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/adema/OneDrive/Bureau/FAC/MDW3/PPP/PROJECT/another test/project_ai/src/Components/RevAIComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './RevUi.css';\r\n\r\nconst RevAIComponent = () => {\r\n  const [transcription, setTranscription] = useState('');\r\n  const [audioFile, setAudioFile] = useState(null);\r\n\r\n  const transcribeAudio = async () => {\r\n    try {\r\n      if (!audioFile) {\r\n        alert('Please select an audio file.');\r\n        return;\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('audioFile', audioFile); // Change 'audioUrl' to 'audioFile'\r\n\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/transcribe',\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data', // Change content type to 'multipart/form-data'\r\n          },\r\n        }\r\n      );\r\n\r\n      const jobId = response.data.jobId;\r\n\r\n      const checkStatus = async () => {\r\n        try {\r\n          const transcriptResponse = await axios.get(\r\n            `http://localhost:5000/api/transcribe/${jobId}`,\r\n            {\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            }\r\n          );\r\n\r\n          if (transcriptResponse.data.status === 'transcribed') {\r\n            const text = transcriptResponse.data.transcript;\r\n            setTranscription(text);\r\n          } else {\r\n            setTimeout(checkStatus, 3000);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching transcript:', error);\r\n        }\r\n      };\r\n\r\n      checkStatus();\r\n    } catch (error) {\r\n      console.error('Error transcribing audio:', error);\r\n    }\r\n  };\r\n  const checkStatus = async () => {\r\n    try {\r\n      const transcriptResponse = await axios.get(\r\n        `http://localhost:5000/api/transcribe/${jobId}`,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (transcriptResponse.data.status === 'transcribed') {\r\n        const text = transcriptResponse.data.transcript;\r\n        setTranscription(text);\r\n      } else {\r\n        setTimeout(checkStatus, 3000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching transcript:', error);\r\n    }\r\n  };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     setAudioFile(event.target.files[0]);\r\n//   };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {/* <div>\r\n          <input type=\"file\" onChange={handleFileChange} accept=\"audio/*\" />\r\n        </div> */}\r\n        <button onClick={transcribeAudio}>Transcribe Audio</button>\r\n      </div>\r\n      <div>\r\n        <p>Transcription Result:</p>\r\n        <p>{transcription}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RevAIComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}