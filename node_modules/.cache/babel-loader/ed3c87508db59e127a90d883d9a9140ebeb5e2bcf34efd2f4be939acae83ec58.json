{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adema\\\\OneDrive\\\\Bureau\\\\FAC\\\\MDW3\\\\PPP\\\\PROJECT\\\\another test\\\\project_ai\\\\src\\\\Components\\\\RevAIComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RevAIComponent = () => {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [audioFile, setAudioFile] = useState(null); // Define audioFile state\n  const [apiKey] = useState('YOUR_REV_AI_API_KEY');\n  const transcribeAudio = async () => {\n    try {\n      if (!audioFile) {\n        alert('Please select an audio file.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('media', audioFile);\n      const response = await axios.post('https://api.rev.ai/revspeech/v1beta/jobs', formData, {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const jobId = response.data.id;\n      const transcriptResponse = await axios.get(`https://api.rev.ai/revspeech/v1beta/jobs/${jobId}/transcript`, {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        }\n      });\n      const text = transcriptResponse.data.monologues[0].elements.map(e => e.value).join(' ');\n      setTranscription(text);\n    } catch (error) {\n      console.error('Error transcribing audio:', error);\n    }\n  };\n  const handleFileChange = event => {\n    setAudioFile(event.target.files[0]); // Set selected audio file to audioFile state\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \"audio/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: transcribeAudio,\n      children: \"Transcribe Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Transcription Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(RevAIComponent, \"7Xo2F7JSqnCOMOpLOBMtwr4TvmI=\");\n_c = RevAIComponent;\nexport default RevAIComponent;\nvar _c;\n$RefreshReg$(_c, \"RevAIComponent\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","RevAIComponent","_s","transcription","setTranscription","audioFile","setAudioFile","apiKey","transcribeAudio","alert","formData","FormData","append","response","post","headers","jobId","data","id","transcriptResponse","get","text","monologues","elements","map","e","value","join","error","console","handleFileChange","event","target","files","children","type","onChange","accept","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/adema/OneDrive/Bureau/FAC/MDW3/PPP/PROJECT/another test/project_ai/src/Components/RevAIComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst RevAIComponent = () => {\r\n  const [transcription, setTranscription] = useState('');\r\n  const [audioFile, setAudioFile] = useState(null); // Define audioFile state\r\n  const [apiKey] = useState('YOUR_REV_AI_API_KEY');\r\n\r\n  const transcribeAudio = async () => {\r\n    try {\r\n      if (!audioFile) {\r\n        alert('Please select an audio file.');\r\n        return;\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('media', audioFile);\r\n\r\n      const response = await axios.post(\r\n        'https://api.rev.ai/revspeech/v1beta/jobs',\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${apiKey}`,\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      );\r\n\r\n      const jobId = response.data.id;\r\n\r\n      const transcriptResponse = await axios.get(\r\n        `https://api.rev.ai/revspeech/v1beta/jobs/${jobId}/transcript`,\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${apiKey}`\r\n          }\r\n        }\r\n      );\r\n\r\n      const text = transcriptResponse.data.monologues[0].elements.map(e => e.value).join(' ');\r\n      setTranscription(text);\r\n    } catch (error) {\r\n      console.error('Error transcribing audio:', error);\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    setAudioFile(event.target.files[0]); // Set selected audio file to audioFile state\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileChange} accept=\"audio/*\" />\r\n      <button onClick={transcribeAudio}>Transcribe Audio</button>\r\n      <div>\r\n        <p>Transcription Result:</p>\r\n        <p>{transcription}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RevAIComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}