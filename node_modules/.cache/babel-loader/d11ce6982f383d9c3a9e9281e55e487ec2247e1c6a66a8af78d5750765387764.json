{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adema\\\\OneDrive\\\\Bureau\\\\FAC\\\\MDW3\\\\PPP\\\\PROJECT\\\\another test\\\\project_ai\\\\src\\\\Components\\\\RevAIComponent.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './RevUi.css';\n\n// const RevAIComponent = () => {\n//   const [transcription, setTranscription] = useState('');\n//   const [audioFile, setAudioFile] = useState(null);\n\n// // ...\n\n// const transcribeAudio = async () => {\n//     try {\n//       if (!audioFile) {\n//         alert('Please select an audio file.');\n//         return;\n//       }\n\n//       const formData = new FormData();\n//       formData.append('audioUrl', audioFile);\n\n//       const response = await axios.post(\n//         'http://localhost:5000/api/transcribe',\n//         formData,\n//         {\n//           headers: {\n//             'Content-Type': 'application/json'\n//           }\n//         }\n//       );\n\n//       const jobId = response.data.jobId;\n\n//       const checkStatus = async () => {\n//         try {\n//           const transcriptResponse = await axios.get(\n//             `http://localhost:5000/api/transcribe/${jobId}`,\n//             {\n//               headers: {\n//                 'Content-Type': 'application/json'\n//               }\n//             }\n//           );\n\n//           if (transcriptResponse.data.status === \"transcribed\") {\n//             const text = transcriptResponse.data.transcript;\n//             setTranscription(text);\n//           } else {\n//             setTimeout(checkStatus, 3000);\n//           }\n//         } catch (error) {\n//           console.error('Error fetching transcript:', error);\n//         }\n//       };\n\n//       checkStatus();\n//     } catch (error) {\n//       console.error('Error transcribing audio:', error);\n//     }\n//   };  \n\n//   // ...\n\n//   const handleFileChange = (event) => {\n//     setAudioFile(event.target.files[0]);\n//   };\n\n//   return (\n//     <div>\n//         <div>\n//           <div>\n//             <input type=\"file\" onChange={handleFileChange} accept=\"audio/*\" />\n//           </div>\n//             <button onClick={transcribeAudio} >\n//               Transcribe Audio\n//             </button>\n//         </div>\n//         <div>\n//           <p>Transcription Result:</p>\n//           <p>{transcription}</p>\n//         </div>\n//     </div>\n//   );\n// };\n\n// export default RevAIComponent;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './RevUi.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RevAIComponent = () => {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [jobIdInput, setJobIdInput] = useState('');\n  const fetchTranscript = async () => {\n    try {\n      const transcriptResponse = await axios.get(`http://localhost:5000/api/transcript/${jobIdInput}`, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (transcriptResponse.data.status === 'transcribed') {\n        const text = transcriptResponse.data.transcript;\n        setTranscription(text);\n      } else {\n        setTimeout(fetchTranscript, 3000);\n      }\n    } catch (error) {\n      console.error('Error fetching transcript:', error);\n    }\n  };\n  const handleJobIdChange = event => {\n    setJobIdInput(event.target.value);\n  };\n  const handleFetchTranscript = () => {\n    if (!jobIdInput) {\n      alert('Please enter a jobId.');\n      return;\n    }\n    fetchTranscript();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter jobId\",\n          value: jobIdInput,\n          onChange: handleJobIdChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFetchTranscript,\n          children: \"Fetch Transcript\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Transcription Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(RevAIComponent, \"9tiOI3rrT9j6FEL5ukNjok4TJl8=\");\n_c = RevAIComponent;\nexport default RevAIComponent;\nvar _c;\n$RefreshReg$(_c, \"RevAIComponent\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","RevAIComponent","_s","transcription","setTranscription","jobIdInput","setJobIdInput","fetchTranscript","transcriptResponse","get","headers","data","status","text","transcript","setTimeout","error","console","handleJobIdChange","event","target","value","handleFetchTranscript","alert","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/adema/OneDrive/Bureau/FAC/MDW3/PPP/PROJECT/another test/project_ai/src/Components/RevAIComponent.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import './RevUi.css';\r\n\r\n// const RevAIComponent = () => {\r\n//   const [transcription, setTranscription] = useState('');\r\n//   const [audioFile, setAudioFile] = useState(null);\r\n\r\n// // ...\r\n\r\n// const transcribeAudio = async () => {\r\n//     try {\r\n//       if (!audioFile) {\r\n//         alert('Please select an audio file.');\r\n//         return;\r\n//       }\r\n  \r\n//       const formData = new FormData();\r\n//       formData.append('audioUrl', audioFile);\r\n  \r\n//       const response = await axios.post(\r\n//         'http://localhost:5000/api/transcribe',\r\n//         formData,\r\n//         {\r\n//           headers: {\r\n//             'Content-Type': 'application/json'\r\n//           }\r\n//         }\r\n//       );\r\n  \r\n//       const jobId = response.data.jobId;\r\n  \r\n//       const checkStatus = async () => {\r\n//         try {\r\n//           const transcriptResponse = await axios.get(\r\n//             `http://localhost:5000/api/transcribe/${jobId}`,\r\n//             {\r\n//               headers: {\r\n//                 'Content-Type': 'application/json'\r\n//               }\r\n//             }\r\n//           );\r\n  \r\n//           if (transcriptResponse.data.status === \"transcribed\") {\r\n//             const text = transcriptResponse.data.transcript;\r\n//             setTranscription(text);\r\n//           } else {\r\n//             setTimeout(checkStatus, 3000);\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Error fetching transcript:', error);\r\n//         }\r\n//       };\r\n  \r\n//       checkStatus();\r\n//     } catch (error) {\r\n//       console.error('Error transcribing audio:', error);\r\n//     }\r\n//   };  \r\n  \r\n//   // ...\r\n  \r\n\r\n//   const handleFileChange = (event) => {\r\n//     setAudioFile(event.target.files[0]);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//         <div>\r\n//           <div>\r\n//             <input type=\"file\" onChange={handleFileChange} accept=\"audio/*\" />\r\n//           </div>\r\n//             <button onClick={transcribeAudio} >\r\n//               Transcribe Audio\r\n//             </button>\r\n//         </div>\r\n//         <div>\r\n//           <p>Transcription Result:</p>\r\n//           <p>{transcription}</p>\r\n//         </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RevAIComponent;\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './RevUi.css';\r\n\r\nconst RevAIComponent = () => {\r\n  const [transcription, setTranscription] = useState('');\r\n  const [jobIdInput, setJobIdInput] = useState('');\r\n\r\n  const fetchTranscript = async () => {\r\n    try {\r\n      const transcriptResponse = await axios.get(\r\n        `http://localhost:5000/api/transcript/${jobIdInput}`,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      if (transcriptResponse.data.status === 'transcribed') {\r\n        const text = transcriptResponse.data.transcript;\r\n        setTranscription(text);\r\n      } else {\r\n        setTimeout(fetchTranscript, 3000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching transcript:', error);\r\n    }\r\n  };\r\n\r\n  const handleJobIdChange = (event) => {\r\n    setJobIdInput(event.target.value);\r\n  };\r\n\r\n  const handleFetchTranscript = () => {\r\n    if (!jobIdInput) {\r\n      alert('Please enter a jobId.');\r\n      return;\r\n    }\r\n    fetchTranscript();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter jobId\"\r\n            value={jobIdInput}\r\n            onChange={handleJobIdChange}\r\n          />\r\n          <button onClick={handleFetchTranscript}>Fetch Transcript</button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <p>Transcription Result:</p>\r\n        <p>{transcription}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RevAIComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}