{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adema\\\\OneDrive\\\\Bureau\\\\FAC\\\\MDW3\\\\PPP\\\\PROJECT\\\\another test\\\\project_ai\\\\src\\\\Components\\\\RevAIComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RevAIComponent = () => {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [audioFile, setAudioFile] = useState(null); // Define audioFile state\n  const [apiKey] = useState('02lmZ4UVWprlGK2KnOFknfSZbdUZhbcPUap2QvgtRCWBB2Cr2gmSBihGIdSUQ8KCCXp9mVehh97Ojj0f9OWlxV2SDMQ5o');\n  const transcribeAudio = async () => {\n    try {\n      if (!audioFile) {\n        alert('Please select an audio file.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('media', audioFile);\n\n      // Send the audio file to your backend server for transcription\n      const response = await axios.post('/api/transcribe',\n      // This route should match the backend route\n      {\n        audioUrl: audioFile\n      },\n      // Send the audio file URL or reference to your backend\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const jobId = response.data.jobId;\n\n      // Fetch the transcript from your backend using the jobId\n      const transcriptResponse = await axios.get(`/api/transcript/${jobId}`,\n      // This route should fetch the transcript from your backend\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const text = transcriptResponse.data; // Assuming the transcript is directly returned as text\n      setTranscription(text);\n    } catch (error) {\n      console.error('Error transcribing audio:', error);\n    }\n  };\n  const handleFileChange = event => {\n    setAudioFile(event.target.files[0]); // Set selected audio file to audioFile state\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \"audio/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: transcribeAudio,\n      children: \"Transcribe Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Transcription Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(RevAIComponent, \"oavhR2aXOPFirZxbhENZYLELuF8=\");\n_c = RevAIComponent;\nexport default RevAIComponent;\nvar _c;\n$RefreshReg$(_c, \"RevAIComponent\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","RevAIComponent","_s","transcription","setTranscription","audioFile","setAudioFile","apiKey","transcribeAudio","alert","formData","FormData","append","response","post","audioUrl","headers","jobId","data","transcriptResponse","get","text","error","console","handleFileChange","event","target","files","children","type","onChange","accept","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/adema/OneDrive/Bureau/FAC/MDW3/PPP/PROJECT/another test/project_ai/src/Components/RevAIComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst RevAIComponent = () => {\r\n  const [transcription, setTranscription] = useState('');\r\n  const [audioFile, setAudioFile] = useState(null); // Define audioFile state\r\n  const [apiKey] = useState('02lmZ4UVWprlGK2KnOFknfSZbdUZhbcPUap2QvgtRCWBB2Cr2gmSBihGIdSUQ8KCCXp9mVehh97Ojj0f9OWlxV2SDMQ5o');\r\n\r\n  const transcribeAudio = async () => {\r\n    try {\r\n      if (!audioFile) {\r\n        alert('Please select an audio file.');\r\n        return;\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('media', audioFile);\r\n\r\n      // Send the audio file to your backend server for transcription\r\n      const response = await axios.post(\r\n        '/api/transcribe', // This route should match the backend route\r\n        { audioUrl: audioFile }, // Send the audio file URL or reference to your backend\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      const jobId = response.data.jobId;\r\n\r\n      // Fetch the transcript from your backend using the jobId\r\n      const transcriptResponse = await axios.get(\r\n        `/api/transcript/${jobId}`, // This route should fetch the transcript from your backend\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      const text = transcriptResponse.data; // Assuming the transcript is directly returned as text\r\n      setTranscription(text);\r\n    } catch (error) {\r\n      console.error('Error transcribing audio:', error);\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    setAudioFile(event.target.files[0]); // Set selected audio file to audioFile state\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileChange} accept=\"audio/*\" />\r\n      <button onClick={transcribeAudio}>Transcribe Audio</button>\r\n      <div>\r\n        <p>Transcription Result:</p>\r\n        <p>{transcription}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RevAIComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACU,MAAM,CAAC,GAAGV,QAAQ,CAAC,+FAA+F,CAAC;EAE1H,MAAMW,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,IAAI,CAACH,SAAS,EAAE;QACdI,KAAK,CAAC,8BAA8B,CAAC;QACrC;MACF;MAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEP,SAAS,CAAC;;MAEnC;MACA,MAAMQ,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAC/B,iBAAiB;MAAE;MACnB;QAAEC,QAAQ,EAAEV;MAAU,CAAC;MAAE;MACzB;QACEW,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,MAAMC,KAAK,GAAGJ,QAAQ,CAACK,IAAI,CAACD,KAAK;;MAEjC;MACA,MAAME,kBAAkB,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CACvC,mBAAkBH,KAAM,EAAC;MAAE;MAC5B;QACED,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,MAAMK,IAAI,GAAGF,kBAAkB,CAACD,IAAI,CAAC,CAAC;MACtCd,gBAAgB,CAACiB,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAME,gBAAgB,GAAIC,KAAK,IAAK;IAClCnB,YAAY,CAACmB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC;;EAED,oBACE3B,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAO6B,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEN,gBAAiB;MAACO,MAAM,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClEnC,OAAA;MAAQoC,OAAO,EAAE5B,eAAgB;MAAAoB,QAAA,EAAC;IAAgB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3DnC,OAAA;MAAA4B,QAAA,gBACE5B,OAAA;QAAA4B,QAAA,EAAG;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC5BnC,OAAA;QAAA4B,QAAA,EAAIzB;MAAa;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjC,EAAA,CA3DID,cAAc;AAAAoC,EAAA,GAAdpC,cAAc;AA6DpB,eAAeA,cAAc;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}