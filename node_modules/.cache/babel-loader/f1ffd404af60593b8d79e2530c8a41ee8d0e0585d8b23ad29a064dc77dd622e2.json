{"ast":null,"code":"const transcribeAudio = async () => {\n  try {\n    if (!audioFile) {\n      alert('Please select an audio file.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('audioUrl', audioFile); // Send the audio file URL to backend\n\n    const response = await axios.post('http://localhost:5000/api/transcribe',\n    // Send request to your backend\n    formData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const jobId = response.data.jobId;\n\n    // Polling method (recommended is to use webhooks for production)\n    const checkStatus = async () => {\n      const transcriptResponse = await axios.get(`http://localhost:5000/api/transcript/${jobId}`,\n      // Fetch transcript from your backend using the jobId\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Check if transcription is completed, and fetch the transcript\n      if (transcriptResponse.data.status === \"transcribed\") {\n        const text = transcriptResponse.data.transcript;\n        setTranscription(text);\n      } else {\n        // If transcription is not completed, wait and check again after a certain interval\n        setTimeout(checkStatus, 3000); // Check status again after 3 seconds\n      }\n    };\n\n    checkStatus(); // Start checking for transcript completion\n  } catch (error) {\n    console.error('Error transcribing audio:', error);\n  }\n};","map":{"version":3,"names":["transcribeAudio","audioFile","alert","formData","FormData","append","response","axios","post","headers","jobId","data","checkStatus","transcriptResponse","get","status","text","transcript","setTranscription","setTimeout","error","console"],"sources":["C:/Users/adema/OneDrive/Bureau/FAC/MDW3/PPP/PROJECT/another test/project_ai/src/Components/RevAIComponent.js"],"sourcesContent":["const transcribeAudio = async () => {\r\n    try {\r\n      if (!audioFile) {\r\n        alert('Please select an audio file.');\r\n        return;\r\n      }\r\n  \r\n      const formData = new FormData();\r\n      formData.append('audioUrl', audioFile); // Send the audio file URL to backend\r\n  \r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/transcribe', // Send request to your backend\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      );\r\n  \r\n      const jobId = response.data.jobId;\r\n  \r\n      // Polling method (recommended is to use webhooks for production)\r\n      const checkStatus = async () => {\r\n        const transcriptResponse = await axios.get(\r\n          `http://localhost:5000/api/transcript/${jobId}`, // Fetch transcript from your backend using the jobId\r\n          {\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        );\r\n        \r\n        // Check if transcription is completed, and fetch the transcript\r\n        if (transcriptResponse.data.status === \"transcribed\") {\r\n          const text = transcriptResponse.data.transcript;\r\n          setTranscription(text);\r\n        } else {\r\n          // If transcription is not completed, wait and check again after a certain interval\r\n          setTimeout(checkStatus, 3000); // Check status again after 3 seconds\r\n        }\r\n      };\r\n  \r\n      checkStatus(); // Start checking for transcript completion\r\n    } catch (error) {\r\n      console.error('Error transcribing audio:', error);\r\n    }\r\n  };\r\n  "],"mappings":"AAAA,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACF,IAAI,CAACC,SAAS,EAAE;MACdC,KAAK,CAAC,8BAA8B,CAAC;MACrC;IACF;IAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEJ,SAAS,CAAC,CAAC,CAAC;;IAExC,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAC/B,sCAAsC;IAAE;IACxCL,QAAQ,EACR;MACEM,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CACF,CAAC;IAED,MAAMC,KAAK,GAAGJ,QAAQ,CAACK,IAAI,CAACD,KAAK;;IAEjC;IACA,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAMC,kBAAkB,GAAG,MAAMN,KAAK,CAACO,GAAG,CACvC,wCAAuCJ,KAAM,EAAC;MAAE;MACjD;QACED,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CACF,CAAC;;MAED;MACA,IAAII,kBAAkB,CAACF,IAAI,CAACI,MAAM,KAAK,aAAa,EAAE;QACpD,MAAMC,IAAI,GAAGH,kBAAkB,CAACF,IAAI,CAACM,UAAU;QAC/CC,gBAAgB,CAACF,IAAI,CAAC;MACxB,CAAC,MAAM;QACL;QACAG,UAAU,CAACP,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;MACjC;IACF,CAAC;;IAEDA,WAAW,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACnD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}