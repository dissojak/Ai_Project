{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adema\\\\OneDrive\\\\Bureau\\\\FAC\\\\MDW3\\\\PPP\\\\PROJECT\\\\another test\\\\project_ai\\\\src\\\\Components\\\\RevAIComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RevAIComponent = () => {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [apiKey] = useState('YOUR_REV_AI_API_KEY');\n  const transcribeAudio = async () => {\n    try {\n      const formData = new FormData();\n      formData.append('media', audioFile);\n      const response = await axios.post('https://api.rev.ai/revspeech/v1beta/jobs', formData, {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const jobId = response.data.id;\n\n      // Poll Rev.ai for the transcript after some time...\n      // Make another request using the jobId to get the transcript\n      // Remember to handle polling and status checks properly\n      // (This is a simplified example without polling)\n\n      const transcriptResponse = await axios.get(`https://api.rev.ai/revspeech/v1beta/jobs/${jobId}/transcript`, {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        }\n      });\n      const text = transcriptResponse.data.monologues[0].elements.map(e => e.value).join(' ');\n      setTranscription(text);\n    } catch (error) {\n      console.error('Error transcribing audio:', error);\n    }\n  };\n  const handleFileChange = event => {\n    // Code to handle file change and set audioFile state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \"audio/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: transcribeAudio,\n      children: \"Transcribe Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Transcription Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(RevAIComponent, \"wFn9un77QVSKQlcmjcrPYQmCx0M=\");\n_c = RevAIComponent;\nexport default RevAIComponent;\nvar _c;\n$RefreshReg$(_c, \"RevAIComponent\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","RevAIComponent","_s","transcription","setTranscription","apiKey","transcribeAudio","formData","FormData","append","audioFile","response","post","headers","jobId","data","id","transcriptResponse","get","text","monologues","elements","map","e","value","join","error","console","handleFileChange","event","children","type","onChange","accept","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/adema/OneDrive/Bureau/FAC/MDW3/PPP/PROJECT/another test/project_ai/src/Components/RevAIComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst RevAIComponent = () => {\r\n  const [transcription, setTranscription] = useState('');\r\n  const [apiKey] = useState('YOUR_REV_AI_API_KEY');\r\n\r\n  const transcribeAudio = async () => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('media', audioFile);\r\n\r\n      const response = await axios.post(\r\n        'https://api.rev.ai/revspeech/v1beta/jobs',\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${apiKey}`,\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      );\r\n\r\n      const jobId = response.data.id;\r\n\r\n      // Poll Rev.ai for the transcript after some time...\r\n      // Make another request using the jobId to get the transcript\r\n      // Remember to handle polling and status checks properly\r\n      // (This is a simplified example without polling)\r\n\r\n      const transcriptResponse = await axios.get(\r\n        `https://api.rev.ai/revspeech/v1beta/jobs/${jobId}/transcript`,\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${apiKey}`\r\n          }\r\n        }\r\n      );\r\n\r\n      const text = transcriptResponse.data.monologues[0].elements.map(e => e.value).join(' ');\r\n      setTranscription(text);\r\n    } catch (error) {\r\n      console.error('Error transcribing audio:', error);\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    // Code to handle file change and set audioFile state\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"file\" onChange={handleFileChange} accept=\"audio/*\" />\r\n      <button onClick={transcribeAudio}>Transcribe Audio</button>\r\n      <div>\r\n        <p>Transcription Result:</p>\r\n        <p>{transcription}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RevAIComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACQ,MAAM,CAAC,GAAGR,QAAQ,CAAC,qBAAqB,CAAC;EAEhD,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEC,SAAS,CAAC;MAEnC,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAC/B,0CAA0C,EAC1CL,QAAQ,EACR;QACEM,OAAO,EAAE;UACP,eAAe,EAAG,UAASR,MAAO,EAAC;UACnC,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,MAAMS,KAAK,GAAGH,QAAQ,CAACI,IAAI,CAACC,EAAE;;MAE9B;MACA;MACA;MACA;;MAEA,MAAMC,kBAAkB,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CACvC,4CAA2CJ,KAAM,aAAY,EAC9D;QACED,OAAO,EAAE;UACP,eAAe,EAAG,UAASR,MAAO;QACpC;MACF,CACF,CAAC;MAED,MAAMc,IAAI,GAAGF,kBAAkB,CAACF,IAAI,CAACK,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MACvFrB,gBAAgB,CAACe,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAME,gBAAgB,GAAIC,KAAK,IAAK;IAClC;EAAA,CACD;EAED,oBACE7B,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAO+B,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEJ,gBAAiB;MAACK,MAAM,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClErC,OAAA;MAAQsC,OAAO,EAAEhC,eAAgB;MAAAwB,QAAA,EAAC;IAAgB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3DrC,OAAA;MAAA8B,QAAA,gBACE9B,OAAA;QAAA8B,QAAA,EAAG;MAAqB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC5BrC,OAAA;QAAA8B,QAAA,EAAI3B;MAAa;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnC,EAAA,CAzDID,cAAc;AAAAsC,EAAA,GAAdtC,cAAc;AA2DpB,eAAeA,cAAc;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}